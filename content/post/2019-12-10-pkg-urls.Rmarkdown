---
title: About URLs in DESCRIPTION
date: '2019-12-10'
slug: urls
tags:
  - description
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      cache = TRUE,
                      warning = FALSE)
```

Among DESCRIPTION usual fields is the free-text URL field where the package authors can store various links to the development website, docs, upstream tool, etc. In this post, we shall explain why storing URLs in DESCRIPTION is important, where else you should add URLs and what kind of URLs are stored in CRAN packages these days.

## Why put URLs in DESCRIPTION?

In the following we'll assume your package has some sort of online development repository ([GitHub](https://happygitwithr.com/big-picture.html)? [GitLab](https://gitlab.com/HeidiSeibold/setup-git-rstudio-gitlab#setup-git-rstudio-gitlab)? R-Forge?) and a documentation website (via [pkgdown](https://pkgdown.r-lib.org/)?). Adding URLs to your package's online homes is extremely useful for several reasons.

> As a side note: Yes, you can store several URLs under URL, even if the field name is singular. [See for instance  `rhub`'s DESCRIPTION](https://github.com/r-hub/rhub/blob/c51e0704ae7011536757f151144415323f4d77b9/DESCRIPTION#L15) :link: :link:

```
URL: https://github.com/r-hub/rhub, https://r-hub.github.io/rhub/
```

So, why put URLs in DESCRIPTION?

* It will help your users find your package's pretty documentation from the CRAN page, instead of just the less pretty PDF manual.

* Likewise, from the CRAN page your contributors can directly find where to submit patches. 

* If your package has a package-level man page, and it should (as drafted by [`usethis::use_package_doc()`](https://usethis.r-lib.org/reference/use_package_doc.html) and then generated by [`roxygen2`](https://roxygen2.r-lib.org/articles/rd.html#packages)), then after typing say `library("rhub")` and then `?rhub`, your users will find the useful links.

* Other tool such as [`helpdesk`](https://github.com/yonicd/helpdesk) can help surface the URLs you store in DESCRIPTION.

* Indirectly, having a link to the docs website and development repo will [increase their page rank](https://community.rstudio.com/t/pkgdown-site-seo/26706) so potential users and contributors find them more easily by simply searching for your package.

> Quick tip, you can add GitHub URLs (URL and BugReports) to DESCRIPTION by running [`usethis::use_github_links()`](https://usethis.r-lib.org/reference/use_github_links.html). :rocket:

## Where else put your URLs?

For the same reasons as previously, you should make the most of all places that can store your package's URL(s). Have you put your package's docs URL

* in [the pkgdown config file](https://pkgdown.r-lib.org/reference/build_site.html#yaml-config), if that's how you built it?

* in the GitHub repo URL field, or the equivalent for your development platform?

Have you used any of your package's URLs?

* In your public message about your package, e.g. as an answer to someone's question?

* In the slides of [your talk about the package](https://www.tidyverse.org/blog/2018/07/carpe-talk/)?

Don't miss any opportunity to point users and contributors in the right direction!

## What URLs in DESCRIPTION files of CRAN packages?

In the following, we shall parse the URL field of the CRAN packages database.

```{r urls1}
db <- tools::CRAN_package_db()

db <- tibble::as_tibble(db[, c("Package", "URL")])
db <- dplyr::distinct(db)
nrow(db)
sum(is.na(db$URL))
```

```{r urls2}
db <- db[!is.na(db$URL),]

library("magrittr")

# function from https://github.com/r-hub/pkgsearch/blob/26c4cc24b9296135b6238adc7631bc5250509486/R/addin.R#L490-L496

url_regex <- function() "(https?://[^\\s,;>]+)"

find_urls <- function(txt) {
  mch <- gregexpr(url_regex(), txt, perl = TRUE)
  res <- regmatches(txt, mch)[[1]]

  if(length(res) == 0) {
    return(list(NULL))
  } else {
    list(unique(res))
  }
}

db %>%
  dplyr::group_by(Package)  %>%
  dplyr::mutate(actual_url = find_urls(URL))%>%
  dplyr::ungroup() %>%
  tidyr::unnest(actual_url) %>%
  dplyr::group_by(Package, actual_url) %>%
  dplyr::mutate(url_parts = list(urltools::url_parse(actual_url))) %>%
  dplyr::ungroup() %>%
  tidyr::unnest(url_parts) %>%
  dplyr::mutate(scheme = trimws(scheme)) -> parsed_db
```

```{r urlsno}
dplyr::count(parsed_db, Package, sort = TRUE)
```

```{r scheme}
dplyr::count(parsed_db, scheme, sort = TRUE)

```{r domain}
dplyr::count(parsed_db, domain, sort = TRUE)

```

Note that you could do the same for the BugReports field.

## Conclusion

In this note, we explained why having URLs in DESCRIPTION of your package can help users and contributors finding the right venues for their needs, and we had a look at URLs currently stored in the DESCRIPTIONs of CRAN packages, underlining the current domination of GitHub. How do _you_ ensure the users of your package can find its best online home? How do you look for online homes of the packages you use?


